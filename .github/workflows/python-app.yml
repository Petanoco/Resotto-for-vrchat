# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build_windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      shell: powershell
      run: |
        git --version
        python --version
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
    - name: Lint with flake8
      shell: powershell
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build
      shell: powershell
      run: |
        ./build.bat
        Compress-Archive -Path dist\* -DestinationPath release_windows.zip
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: release_windows
        path: release_windows.zip

  build_linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build
      run: |
        ./build.sh
        cd dist && zip -r ../release_linux.zip ./* && cd ..
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: release_linux
        path: release_linux.zip

  create_release:
    runs-on: ubuntu-latest
    needs: [build_windows, build_linux]

    steps:
      - name: Download artifacts windows
        uses: actions/download-artifact@v3
        with:
          name: release_windows
          path: .
      - name: Download artifacts linux
        uses: actions/download-artifact@v3
        with:
          name: release_linux
          path: .
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: "${{ github.ref_name }}"
          body: "This is a Draft Release"
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload windows release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_windows.zip
          asset_name: Resotto_${{ github.ref_name }}_windows.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload linux release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_linux.zip
          asset_name: Resotto_${{ github.ref_name }}_linux.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
